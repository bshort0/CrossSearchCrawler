"http://ieeexplore.ieee.org/search/searchresult.jsp?download-format=download-csv&bulkSetSize=2000&matchBoolean%3Dtrue%26searchField%3DSearch_All_Text%26queryText%3D%28%28%28%28.QT.Number+of+Transitions.QT.+OR+.QT..HSH.+of+Transitions.QT.%29+AND+.QT.DFA.QT.%29+AND+.QT.Intrusion+Detection+System.QT.%29%29",2016/08/04 11:49:53
"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Year","Volume","Issue","Start Page","End Page","Abstract","ISSN","ISBN","EISBN","DOI",PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","MeSH Terms",Article Citation Count,Patent Citation Count,"Reference Count","Copyright Year","Online Date",Issue Date,"Meeting Date","Publisher",Document Identifier
"Accelerating Multipattern Matching on Compressed HTTP Traffic","A. Bremler-Barr; Y. Koral","Efi Arazi School of Computer Science, The Interdisciplinary Center, Herzlia, Israel","IEEE/ACM Transactions on Networking","20120612","2012","20","3","970","983","Current security tools, using “signature-based” detection, do not handle compressed traffic, whose market-share is constantly increasing. This paper focuses on compressed HTTP traffic. HTTP uses GZIP compression and requires some kind of decompression phase before performing a string matching. We present a novel algorithm, Aho-Corasick-based algorithm for Compressed HTTP (ACCH), that takes advantage of information gathered by the decompression phase in order to accelerate the commonly used Aho-Corasick pattern-matching algorithm. By analyzing real HTTP traffic and real Web application firewall signatures, we show that up to 84% of the data can be skipped in its scan. Surprisingly, we show that it is faster to perform pattern matching on the compressed data, with the penalty of decompression, than on regular traffic. As far as we know, we are the first paper that analyzes the problem of “on-the-fly” multipattern matching on compressed HTTP traffic and suggest a solution.","1063-6692;10636692","","","10.1109/TNET.2011.2172456","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062397","Compressed HTTP;computer security;intrusion detection;pattern matching","Acceleration;Browsers;Dictionaries;Doped fiber amplifiers;Memory management;Pattern matching;Security","Internet;authorisation;computer network security;data compression;hypermedia;string matching;telecommunication traffic;transport protocols","ACCH;Aho-Corasick-based algorithm for Compressed HTTP;GZIP compression;compressed HTTP traffic;data compression;decompression phase;market-share;multipattern matching acceleration;pattern matching;real Web application firewall signatures;security tools;signature-based detection;string matching","","4","","34","","2011-10-27","June 2012","","IEEE","IEEE Journals & Magazines"
"Efficient Pattern Matching Algorithm for Memory Architecture","C. H. Lin; S. C. Chang","Dept. of Ind. Technol. Educ., Nat. Taiwan Normal Univ., Taipei, Taiwan","IEEE Transactions on Very Large Scale Integration (VLSI) Systems","20101223","2011","19","1","33","41","Network intrusion detection system is used to inspect packet contents against thousands of predefined malicious or suspicious patterns. Because traditional software alone pattern matching approaches can no longer meet the high throughput of today's networking, many hardware approaches are proposed to accelerate pattern matching. Among hardware approaches, memory-based architecture has attracted a lot of attention because of its easy reconfigurability and scalability. In order to accommodate the increasing number of attack patterns and meet the throughput requirement of networks, a successful network intrusion detection system must have a memory-efficient pattern-matching algorithm and hardware design. In this paper, we propose a memory-efficient pattern-matching algorithm which can significantly reduce the memory requirement. For Snort rule sets, the new algorithm achieves 21% of memory reduction compared with the traditional Aho-Corasick algorithm. In addition, we can gain 24% of memory reduction by integrating our approach to the bit-split algorithm which is the state-of-the-art memory-based approach.","1063-8210;10638210","","","10.1109/TVLSI.2009.2028346","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5272427","Aho–Corasick (AC) algorithm;finite automata;pattern matching","Acceleration;Algorithm design and analysis;Computer architecture;Decoding;Hardware;Intrusion detection;Memory architecture;Pattern matching;Scalability;Throughput","memory architecture;pattern matching;security of data","Snort rule sets;bit-split algorithm;hardware design;memory architecture;memory reduction;network intrusion detection system;packet content inspection;pattern matching algorithm;pattern matching approach","","3","","30","","2009-09-29","Jan. 2011","","IEEE","IEEE Journals & Magazines"
"DFA-Based Regular Expression Matching on Compressed Traffic","Y. Sun; M. S. Kim","Sch. of Electr. Eng. & Comput. Sci., Washington State Univ., Pullman, WA, USA","2011 IEEE International Conference on Communications (ICC)","20110728","2011","","","1","5","Many network security applications in today's networks are based on deep packet inspection, checking not only the header portion but also the payload portion of a packet. For example, traffic monitoring, layer-7 filtering, and network intrusion detection all require an accurate analysis of packet content in search for predefined patterns to identify specific classes of applications, viruses, attack signatures, etc. Regular expressions are often used to represent such patterns. They are implemented using finite automata, which take the payload of a packet as an input string. However, existing approaches, both non-deterministic finite automata (NFA) and deterministic finite automata (DFA), do not deal with compressed traffic, which becomes more and more popular in HTTP applications. In this paper, we propose an efficient algorithm for regular expression matching to implement deep packet inspection on compressed traffic. Based on the observations of DFA, we design a scheme to skip most of the matching process in the compressed parts of traffic. To the best of our knowledge, this is the first effort to design an efficient regular expression matching on compressed traffic. We evaluate our algorithm using rule sets provided by Snort, a popular open-source intrusion detection system. The evaluation results show that our approach can reduce the number of state access in the DFA significantly.","1550-3607;15503607","978-1-61284-232-5;9781612842325","978-1-61284-231-8;9781612842318","10.1109/icc.2011.5962596","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5962596","","Automata;Computers;Doped fiber amplifiers;Inspection;Intrusion detection;Pattern matching;Payloads","computer network security;deterministic automata;finite automata","DFA-based regular expression matching;Snort;compressed traffic;deep packet inspection;layer-7 filtering;network intrusion detection;network security;nondeterministic finite automata;open-source intrusion detection system;rule sets;traffic monitoring","","1","","25","","","5-9 June 2011","","IEEE","IEEE Conference Publications"
"Compact DFA Structure for Multiple Regular Expressions Matching","W. Lin; Y. Tang; B. Liu; D. Pao; X. Wang","Dept. of Comput. Sci. & Technol., Tsinghua Univ., Beijing, China","2009 IEEE International Conference on Communications","20090811","2009","","","1","5","New applications such as real-time deep packet inspection require high-speed regular expression (regex) matcher, and the number of regexes in pattern store is increasing to several thousands, which requires a memory efficient solution. In this paper, a kind of hardware based compact DFA structure for multiple regexes matching called CPDFA is presented. According to statistics of regexes in Snort and L7-filter rules, transitions from each state to its next states are not evenly distributed. The summation of transitions from each state to its top three most popular next states takes about 90% of all the transitions. Therefore, CPDFA employs an indirect index table to represent transitions to top three most popular next states more efficiently. The remaining transitions which take about 10% of all the transitions are stored in direct transition table or K parallel SRAMs according to the number of remaining transitions from the same state is more than K or not. Simulation shows that CPDFA structure can save about 90% of memory storage comparing with the original DFA structure. By using pipelined architecture in FPGA, CPDFA can advance one character in one memory access cycle.","1550-3607;15503607","978-1-4244-3435-0;9781424434350","978-1-4244-3435-0;9781424434350","10.1109/ICC.2009.5198833","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5198833","","Application software;Communications Society;Computer science;Doped fiber amplifiers;Field programmable gate arrays;Inspection;Intrusion detection;Paper technology;Pattern matching;Throughput","field programmable gate arrays;security of data;telecommunication security","DFA Structure;deterministic finite automata;indirect index;multiple regular expressions matching;parallel SRAMs;real-time deep packet inspection;regular expression matcher","","1","","13","","","14-18 June 2009","","IEEE","IEEE Conference Publications"
"Scalable Lookahead Regular Expression Detection System for Deep Packet Inspection","M. Bando; N. S. Artan; H. J. Chao","Department of Electrical and Computer Engineering, Polytechnic Institute of New York University, Brooklyn, NY, USA","IEEE/ACM Transactions on Networking","20120612","2012","20","3","699","714","Regular expressions (RegExes) are widely used, yet their inherent complexity often limits the total number of RegExes that can be detected using a single chip for a reasonable throughput. This limit on the number of RegExes impairs the scalability of today's RegEx detection systems. The scalability of existing schemes is generally limited by the traditional detection paradigm based on per-character-state processing and state transition detection. The main focus of existing schemes is on optimizing the number of states and the required transitions, but not on optimizing the suboptimal character-based detection method. Furthermore, the potential benefits of allowing out-of-sequence detection, instead of detecting components of a RegEx in the order of appearance, have not been explored. Lastly, the existing schemes do not provide ways to adapt to the evolving RegExes. In this paper, we propose Lookahead Finite Automata (LaFA) to perform scalable RegEx detection. LaFA requires less memory due to these three contributions: 1) providing specialized and optimized detection modules to increase resource utilization; 2) systematically reordering the RegEx detection sequence to reduce the number of concurrent operations; 3) sharing states among automata for different RegExes to reduce resource requirements. Here, we demonstrate that LaFA requires an order of magnitude less memory compared to today's state-of-the-art RegEx detection systems. Using LaFA, a single-commodity field programmable gate array (FPGA) chip can accommodate up to 25&nbsp; 000 (25 k) RegExes. Based on the throughput of our LaFA prototype on FPGA, we estimate that a 34-Gb/s throughput can be achieved.","1063-6692;10636692","","","10.1109/TNET.2011.2181411","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6134694","DPI;Deep packet inspection;LaFA;Lookahead Finite Automata;NIDPS;network intrusion detection and prevention system;regular expressions","Automata;Complexity theory;Correlation;Data structures;Doped fiber amplifiers;Memory management;Timing","computer network security;field programmable gate arrays;finite automata;inspection","FPGA chip;LaFA;RegEx detection systems;bit rate 34 Gbit/s;deep packet inspection;lookahead finite automata;network intrusion detection;per-character-state processing;scalable lookahead regular expression detection system;single-commodity field programmable gate array;state transition detection;suboptimal character-based detection method","","5","","34","","2012-01-18","June 2012","","IEEE","IEEE Journals & Magazines"
"Book of abstracts","","","Decision and Control, 2009 held jointly with the 2009 28th Chinese Control Conference. CDC/CCC 2009. Proceedings of the 48th IEEE Conference on","20100129","2009","","","","","Summary form only given. Provides an abstract for each of the presentations in the conference proceedings.","0191-2216;01912216","978-1-4244-3871-6;9781424438716","","10.1109/CDC.2009.5399675","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5399675","","","","","","0","","","","","15-18 Dec. 2009","","IEEE","IEEE Conference Publications"
"Memory efficient deep packet inspection using transition functions","K. V. Lakshmi","Indian Institute of Science, Bangalore, India","2016 8th International Conference on Communication Systems and Networks (COMSNETS)","20160324","2016","","","1","2","Regular expression matching is the state of the art in signature based intrusion detection systems. A regular expression matching algorithm used in intrusion detection systems is expected to process data at a speed linear in size of the incoming data and also to be able to run on network devices with limited memory. Traditional DFA and NFA based algorithms fail to meet either of these two requirements. The existing techniques try to either modify a DFA or a NFA, or combine both these to find a trade off between speed and memory requirements. The idea we propose in this paper is orthogonal to existing techniques. We propose a new approach to store a finite automaton in memory which otherwise is stored as a transition table. Our approach can be used by existing algorithms to further reduce the memory requirements with a minimal increase in the processing speed.","","","","10.1109/COMSNETS.2016.7440011","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7440011","","Automata;Communication systems;Computers;Inspection;Intrusion detection;Memory management","deterministic automata;digital signatures;finite automata;security of data","DFA;NFA;deterministic finite automaton;memory efficient deep packet inspection;nondeterministic finite automaton;regular expression matching algorithm;signature based intrusion detection system;transition function","","","","10","","","5-10 Jan. 2016","","IEEE","IEEE Conference Publications"
"StriFA: Stride Finite Automata for High-Speed Regular Expression Matching in Network Intrusion Detection Systems","X. Wang; Y. Xu; J. Jiang; O. Ormond; B. Liu; X. Wang","Department of Computer Science and Technology, Tsinghua University, Beijing, China","IEEE Systems Journal","20130704","2013","7","3","374","384","Deep packet inspection has become a key component in network intrusion detection systems (NIDSes), where every packet in the incoming data stream needs to be compared with patterns in an attack database, byte-by-byte, using either string matching or regular expression matching. Regular expression matching, despite its flexibility and efficiency in attack identification, brings significantly high computation and storage complexities to NIDSes, making line-rate packet processing a challenging task. In this paper, we present stride finite automata (StriFA), a novel finite automata family, to accelerate both string matching and regular expression matching. Different from conventional finite automata, which scan the entire traffic stream to locate malicious information, a StriFA only needs to scan a partial traffic stream to find suspicious information. The presented StriFA technique has been implemented in software and evaluated based on different traces. The simulation results show that the StriFA acceleration scheme offers an increased speed over traditional nondeterministic finite automaton/deterministic finite automaton, while at the same time reducing the memory requirement.","1932-8184;19328184","","","10.1109/JSYST.2013.2244791","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6475958","Deep packet inspection (DPI);deterministic finite automaton (DFA);network intrusion detection systems (NIDSes);nondeterministic finite automaton (NFA)","Acceleration;Automata;Doped fiber amplifiers;Educational institutions;Engines;Memory management;Pattern matching","finite automata;security of data;string matching","NIDS;StriFA acceleration scheme;attack database;attack identification;data stream;high-speed regular expression matching;line-rate packet processing;malicious information;network intrusion detection systems;stride finite automata;string matching;traffic stream","","2","","31","","2013-03-07","Sept. 2013","","IEEE","IEEE Journals & Magazines"
"Accelerating String Matching Using Multi-Threaded Algorithm on GPU","C. H. Lin; S. Y. Tsai; C. H. Liu; S. C. Chang; J. M. Shyu","Nat. Taiwan Normal Univ., Taipei, Taiwan","Global Telecommunications Conference (GLOBECOM 2010), 2010 IEEE","20110110","2010","","","1","5","Network Intrusion Detection System has been widely used to protect computer systems from network attacks. Due to the ever-increasing number of attacks and network complexity, traditional software approaches on uni-processors have become inadequate for the current high-speed network. In this paper, we propose a novel parallel algorithm to speedup string matching performed on GPUs. We also innovate new state machine for string matching, the state machine of which is more suitable to be performed on GPU. We have also described several speedup techniques considering special architecture properties of GPU. The experimental results demonstrate the new algorithm on GPUs achieves up to 4,000 times speedup compared to the AC algorithm on CPU. Compared to other GPU approaches, the new algorithm achieves 3 times faster with significant improvement on memory efficiency. Furthermore, because the new Algorithm reduces the complexity of the Aho-Corasick algorithm, the new algorithm also improves on memory requirements.","1930-529X;1930529X","978-1-4244-5636-9;9781424456369","978-1-4244-5637-6;9781424456376","10.1109/GLOCOM.2010.5683320","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5683320","","Algorithm design and analysis;Graphics processing unit;Instruction sets;Intrusion detection;Memory management;Throughput","computer graphic equipment;computer network security;coprocessors;multi-threading;string matching","Aho-Corasick algorithm;GPU;computer systems protection;multi-threaded Algorithm;network attacks;network intrusion detection system;state machine;string matching","","14","","20","","","6-10 Dec. 2010","","IEEE","IEEE Conference Publications"
"Reorganized and Compact DFA for Efficient Regular Expression Matching","K. Wang; Y. Qi; Y. Xue; J. Li","Dept. of Autom., Tsinghua Univ., Beijing, China","2011 IEEE International Conference on Communications (ICC)","20110728","2011","","","1","5","Regular expression matching has become a critical yet challenging technique in content-aware network processing, such as application identification and deep inspection. To meet the requirement for processing heavy network traffic at line rate, Deterministic Finite Automata (DFA) is widely used to accelerate regular expression matching at the expense of large memory usage. In this paper, we propose a DFA-based algorithm named RCDFA (Reorganized and Compact DFA), which dramatically reduces the memory usage while maintaining fast and deterministic lookup speed. Based on the dissection of real-life DFA tables, we observe that almost every state has multiple similar states, i.e. they share identical next-state transitions for most input characters. However, these similar states often distribute at nonadjacent positions in the original DFA table. RCDFA aims at reorganizing all similar states into adjacent entries, so that identical transitions become consecutive along the state dimension, then compresses the reorganized DFA table utilizing bitmap technique. Coupled with mapping along the character dimension, RCDFA is not only efficient in DFA compression, but also effective for hardware implementation. Experiment results show, RCDFA has superior performance in terms of high processing speed, low memory usage and short preprocessing time. RCDFA consistently achieves over 95% compression ratio for existing real-life rule sets. Implemented in a single Xilinx Virtex-6 FPGA platform, RCDFA matching engine achieved 12Gbps throughput.","1550-3607;15503607","978-1-61284-232-5;9781612842325","978-1-61284-231-8;9781612842318","10.1109/icc.2011.5963291","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5963291","","Doped fiber amplifiers;Engines;Field programmable gate arrays;Hardware;Inspection;Pattern matching;Throughput","computer networks;field programmable gate arrays;finite automata;telecommunication traffic","Xilinx Virtex-6 FPGA platform;bitmap technique;content aware network processing;deterministic finite automata;next state transitions;regular expression matching;reorganized and compact DFA","","3","","17","","","5-9 June 2011","","IEEE","IEEE Conference Publications"
"A memory efficient FPGA-based pattern matching engine for stateful NIDS","Tran Trung Hieu; N. T. Tran","Fac. of Comput. Sci. & Eng., HCMC Univ. of Technol., Ho Chi Minh City, Vietnam","2013 Fifth International Conference on Ubiquitous and Future Networks (ICUFN)","20130930","2013","","","252","257","Pattern matching task plays an important role in network security applications especially Network Intrusion Detection System (NIDS). The limitation of matching throughput on general purpose processor gives rise to implementation of the task on FPGA. In this paper, we introduce a memory efficient FPGA-based pattern matching engine. We bases on Deterministic Finite Automata (DFA) and propose some modifications to reduce redundant logic. The proposed design, with better memory utilization, is capable of dynamic update and compatible to stateful NIDS. The analysis of memory efficiency and the hardware implementation of proposed design are also provided in this paper. We experiment our approach on contemporary NIDS pattern sets and build a prototype to test on real network environment. The results show that our design could save up to 90% hardware resources compare to traditional approach. The matching engine is compatible to gigabit network and could achieve 2.7-3.2x speed up to software-based matching engine.","2165-8528;21658528","","","10.1109/ICUFN.2013.6614821","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6614821","DFA;FPGA;FSM;NIDS;pattern matching","Engines;Field programmable gate arrays;Indexes","deterministic automata;field programmable gate arrays;finite state machines;pattern matching;security of data","DFA;FPGA-based pattern matching engine;NIDS;deterministic finite automata;general purpose processor;gigabit network;hardware implementation;memory efficiency;network intrusion detection system;network security applications;redundant logic","","1","","14","","","2-5 July 2013","","IEEE","IEEE Conference Publications"
"Fast and Memory-Efficient Traffic Classification with Deep Packet Inspection in CMP Architecture","T. Liu; Y. Sun; L. Guo","Inst. of Comput. Technol., Chinese Acad. of Sci., Beijing, China","Networking, Architecture and Storage (NAS), 2010 IEEE Fifth International Conference on","20100916","2010","","","208","217","Traffic classification is important to many network applications, such as network monitoring. The classic way to identify flows, e.g., examining the port numbers in the packet headers, becomes ineffective. In this context, deep packet inspection technology, which does not only inspect the packet headers but also the packet payloads, plays a more important role in traffic classification. Meanwhile regular expressions are replacing strings to represent patterns because of their expressive power, simplicity and flexibility. However, regular expressions mathcing technique causes a high memory usage and processing cost, which result in low throughout. In this paper, we analyze the application-level protocol distribution of network traffic and conclude its characteristic. Furthermore, we design a fast and memory-efficient system of a two-layer architecture for traffic classification with the help of regular expressions in multi-core architecture, which is different from previous one-layer architecture. In order to reduce the memory usage of DFA, we use a compression algorithm called CSCA to perform regular expressions matching, which can reduce 95% memory usage of DFA. We also introduce some optimizations to accelerate the matching speed. We use real-world traffic and all L7-filter protocol patterns to make our experiments, and the results show that the system achieves at Gbps level throughout in 4-cores Servers.","","978-1-4244-8133-0;9781424481330","","10.1109/NAS.2010.43","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5575653","","Computer architecture;Doped fiber amplifiers;Inspection;Instruction sets;Message systems;Payloads;Protocols","telecommunication traffic;transport protocols","CMP architecture;L7-filter protocol patterns;application-level protocol distribution of network traffic;deep packet inspection technology;fast traffic classification;memory-efficient traffic classification","","3","","25","","","15-17 July 2010","","IEEE","IEEE Conference Publications"
"Bypassing Space Explosion in High-Speed Regular Expression Matching","J. Patel; A. X. Liu; E. Torng","Department of Computer Science and Engineering, Michigan State University, East Lansing","IEEE/ACM Transactions on Networking","20141218","2014","22","6","1701","1714","Network intrusion detection and prevention systems commonly use regular expression (RE) signatures to represent individual security threats. While the corresponding deterministic finite state automata (DFA) for any one RE is typically small, the DFA that corresponds to the entire set of REs is usually too large to be constructed or deployed. To address this issue, a variety of alternative automata implementations that compress the size of the final automaton have been proposed such as extended finite automata (XFA) and delayed input DFA (D <sup>2</sup>FA). The resulting final automata are typically much smaller than the corresponding DFA. However, the previously proposed automata construction algorithms do suffer from some drawbacks. First, most employ a “Union then Minimize” framework where the automata for each RE are first joined before minimization occurs. This leads to an expensive nondeterministic finite automata (NFA) to DFA subset construction on a relatively large NFA. Second, most construct the corresponding large DFA as an intermediate step. In some cases, this DFA is so large that the final automaton cannot be constructed even though the final automaton is small enough to be deployed. In this paper, we propose a “Minimize then Union” framework for constructing compact alternative automata focusing on the D <sup>2</sup>FA. We show that we can construct an almost optimal final D <sup>2</sup>FA with small intermediate parsers. The key to our approach is a space- and time-efficient routine for merging two compact D <sup>2</sup>FA into a compact D <sup>2</sup>FA. In our experiments, our algorithm runs on average 155 times faster and uses 1500 times less memory than previous algorithms. For example, we are able to construct a D <sup>2</sup>FA with over 80 000 000 states using only 1 GB of main memory in only 77 min.","1063-6692;10636692","","","10.1109/TNET.2014.2309014","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6807837","Deep packet inspection;information security;intrusion detection and prevention;network security;regular expression matching","Automata;Explosions;Intrusion detection;Memory management;Minimization;Standards","deterministic automata;finite state machines;pattern matching;telecommunication security","D<sup>2</sup>FA;NFA;RE;XFA;bypassing space explosion;delayed input DFA;deterministic finite state automata;expensive nondeterministic finite automata;extended finite automata;high-speed regular expression matching;minimize then union framework;network intrusion detection;network prevention systems;regular expression signatures;security threats;union then minimize framework","","4","","37","","2014-04-29","Dec. 2014","","IEEE","IEEE Journals & Magazines"
"Hardware-accelerated regular expression matching at multiple tens of Gb/s","J. van Lunteren; A. Guanella","IBM Research - Zurich, 8803 R&#x00FC;schlikon, Switzerland","INFOCOM, 2012 Proceedings IEEE","20120510","2012","","","1737","1745","Hardware acceleration of regular expression matching is key to meeting the throughput requirements of state-of-the-art network intrusion detection systems (NIDSs) dictated by fast growing link speeds. This paper presents extensions to a programmable state machine, called B-FSM, which was initially optimized for string matching. These extensions enable direct support in hardware for essential regular expression features, such as character classes and case insensitivity. Moreover, they also allow the exploitation of regular expression properties that show up at the data structure level as common transitions shared between multiple states, resulting in storage reductions of up to 95% for five NIDS pattern sets analyzed. Additional instruction support based on a flexible integration within the B-FSM data structure increases the processing capabilities and enables the scaling to larger pattern collections. The new IBM Power Edge of Network<sup>TM</sup> processor employs the B-FSM technology to provide scanning capabilities at typical rates of 20-40 Gb/s.","0743-166X;0743166X","978-1-4673-0773-4;9781467307734","","10.1109/INFCOM.2012.6195546","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6195546","","Data structures;Doped fiber amplifiers;Engines;Hardware;Optimization;Registers;Vectors","data structures;finite state machines;instruction sets;parallel processing;security of data;string matching","B-FSM data structure;IBM Power Edge of Network processor;NIDS pattern set;PowerEn processor;case insensitivity;character class;flexible integration;hardware-accelerated regular expression matching;instruction support;link speed;network intrusion detection system;processing capability;programmable state machine;regular expression features;scanning capability;storage reduction;string matching;throughput requirement","","10","1","24","","","25-30 March 2012","","IEEE","IEEE Conference Publications"
"PiDFA: A practical multi-stride regular expression matching engine based On FPGA","J. Yang; L. Jiang; Q. Tang; Q. Dai; J. Tan","Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China, University of Chinese Academy of Sciences, Beijing, China","2016 IEEE International Conference on Communications (ICC)","20160714","2016","","","1","7","DPI technology has been widely deployed in networking intrusion detection system (NIDS) to detect attacks or viruses. State-of-the-art NIDS uses deterministic finite automata (DFA) algorithms to perform regular expression matching for its stable matching speed. However, traditional DFA algorithm's throughput is limited by the input character's width (usually one character per time). Although the multi-stride method (process multiple characters per time) can increase the throughput, it leads the DFA transition table to an exponentially increased memory consumption. In this paper, we propose a novel multi-stride regular expression matching engine called PiDFA based on Field-Programmable Gate Array (FPGA). It applies two methods to solve traditional multi-stride algorithms' memory explosion problem: DFA Transition Merging method and top-k state extraction method. Experiment results show that PiDFA achieves more than 30-fold better performance than original DFA algorithm. Whats more, PiDFA is orthogonal to existing transition table compression algorithms. Implemented with PiDFA algorithm, ClusterFA's matching speed is increased by 6-50 times while maintaining ClusterFA's low memory consumption.","","","","10.1109/ICC.2016.7511199","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7511199","DFA;Deep Packet Inspection;FPGA;Regular Expression Matching","Clustering algorithms;Compression algorithms;Engines;Field programmable gate arrays;Memory management;Merging;Throughput","deterministic automata;field programmable gate arrays;finite automata;security of data","ClusterFA matching speed;DPI technology;FPGA;NIDS;PiDFA;deterministic finite automata algorithms;memory consumption;memory explosion problem;multistride method;multistride regular expression matching engine;networking intrusion detection system;top-k state extraction method","","","","","","","22-27 May 2016","","IEEE","IEEE Conference Publications"
"A Low-Energy Variation-Tolerant Asynchronous TCAM for Network Intrusion Detection Systems","N. Onizawa; W. J. Gross; T. Hanyu","Dept. of Electr. & Comput. Eng., McGill Univ., Montreal, QC, Canada","Asynchronous Circuits and Systems (ASYNC), 2013 IEEE 19th International Symposium on","20130624","2013","","","8","15","This paper introduces a low-energy variation-tolerant asynchronous ternary content-addressable memory (TCAM) for Network Intrusion Detection Systems (NIDS). The proposed special-purpose TCAM can detect packet payloads as ""virus free"" by inspecting only a few bytes. Hence, it adaptively cancels unnecessary searches, leading to greatly reduction in the search delay time and energy dissipation. For timing robustness with low area overhead, a word circuit that stores a virus pattern is designed based on both a quasi-delay insensitive (QDI) and a bundled-data techniques. The QDI word circuit is realized by combining complementary word circuits for only a small portion of the TCAM that is sensitive to delay variations. For performance evaluation, a probability of the virus detection is calculated using a set of real packet traces from MIT DARPA. A 2048 × 128-byte asynchronous TCAM is designed using TSMC 65nm CMOS technology. The energy dissipation is 93.1% lower and the cycle time is 52.4% lower than those of a deep-pipelined synchronous TCAM with a comparable area. It is also demonstrated that the proposed TCAM tolerates up to 47% variations (3s) of threshold voltages.","1522-8681;15228681","978-1-4673-5956-6;9781467359566","","10.1109/ASYNC.2013.16","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6546172","","","CMOS integrated circuits;content-addressable storage;delays;security of data","NIDS;QDI word circuit;TSMC CMOS technology;bundled-data techniques;deep-pipelined synchronous TCAM;delay variations;energy dissipation;low-energy variation-tolerant asynchronous TCAM;network intrusion detection systems;packet payload detection;packet traces;search delay time;size 65 nm;ternary content-addressable memory;virus detection probability","","4","","28","","","19-22 May 2013","","IEEE","IEEE Conference Publications"
"CompactDFA: Generic State Machine Compression for Scalable Pattern Matching","A. Bremler-Barr; D. Hay; Y. Koral","Comput. Sci. Dept., Interdiscipl. Center, Herzliya, Israel","INFOCOM, 2010 Proceedings IEEE","20100506","2010","","","1","9","Pattern matching algorithms lie at the core of all contemporary Intrusion Detection Systems (IDS), making it intrinsic to reduce their speed and memory requirements. This paper focuses on the most popular class of pattern-matching algorithms, the Aho-Corasick-like algorithms, which are based on constructing and traversing a Deterministic Finite Automaton (DFA), representing the patterns. While this approach ensures deterministic time guarantees, modern IDSs need to deal with hundreds of patterns, thus requiring to store very large DFAs which usually do not fit in fast memory. This results in a major bottleneck on the throughput of the IDS, as well as its power consumption and cost. We propose a novel method to compress DFAs by observing that the name of the states is meaningless. While regular DFAs store separately each transition between two states, we use this degree of freedom and encode states in such a way that all transitions to a specific state can be represented by a single prefix that defines a set of current states. Our technique applies to a large class of automata, which can be categorized by simple properties. Then, the problem of pattern matching is reduced to the well-studied problem of Longest Prefix Matching (LPM) that can be solved either in TCAM, in commercially available IP-lookup chips, or in software. Specifically, we show that with a TCAM our scheme can reach a throughput of 10 Gbps with low power consumption.","0743-166X;0743166X","978-1-4244-5836-3;9781424458363","","10.1109/INFCOM.2010.5462160","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5462160","","Automata;Communications Society;Computer science;Doped fiber amplifiers;Energy consumption;Hardware;Intrusion detection;Pattern matching;Throughput;USA Councils","data compression;deterministic automata;finite state machines;pattern matching;security of data","Aho-Corasick-like algorithms;IP-lookup chips;TCAM;bit rate 10 Gbit/s;compactDFA;deterministic finite automaton;generic state machine compression;intrusion detection systems;longest prefix matching;low power consumption;power consumption;scalable pattern matching algorithms","","14","1","21","","","14-19 March 2010","","IEEE","IEEE Conference Publications"
"Decompression-free inspection: DPI for shared dictionary compression over HTTP","A. Bremler-Barr; S. T. David; D. Hay; Y. Koral","The Interdisciplinary Center, Hertzelia, Israel","INFOCOM, 2012 Proceedings IEEE","20120510","2012","","","1987","1995","Deep Packet Inspection (DPI) is the most time and resource consuming procedure in contemporary security tools such as Network Intrusion Detection/Prevention System (NIDS/IPS), Web Application Firewall (WAF), or Content Filtering Proxy. DPI consists of inspecting both the packet header and payload and alerting when signatures of malicious software appear in the traffic. These signatures are identified through pattern matching algorithms. The portion of compressed traffic of overall Internet traffic is constantly increasing. This paper focuses on traffic compressed using shared dictionary. Unlike traditional compression algorithms, this compression method takes advantage of the inter-response redundancy (e.g., almost the same data is sent over and over again) as in nowadays dynamic Data. Shared Dictionary Compression over HTTP (SDCH), introduced by Google in 2008, is the first algorithm of this type. SDCH works well with other compression algorithm (as Gzip), making it even more appealing. Performing DPI on any compressed traffic is considered hard, therefore today's security tools either do not inspect compressed data, alter HTTP headers to avoid compression, or decompress the traffic before inspecting it. We present a novel pattern matching algorithm that inspects SDCH-compressed traffic without decompressing it first. Our algorithm relies on offline inspection of the shared dictionary, which is common to all compressed traffic, and marking auxiliary information on it to speed up the online DPI inspection. We show that our algorithm works near the rate of the compressed traffic, implying a speed gain of SDCH's compression ratio (which is around 40%). We also discuss how to deal with SDCH compression over Gzip compression, and show how to perform regular expression matching with about the same speed gain.","0743-166X;0743166X","978-1-4673-0773-4;9781467307734","","10.1109/INFCOM.2012.6195576","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6195576","","Automata;Dictionaries;Doped fiber amplifiers;Google;Pattern matching;Security;Servers","Internet;computer network security;data compression;pattern matching;transport protocols","Gzip compression;HTTP;Internet traffic;SDCH-compressed traffic inspection;Web application firewall;compression algorithm;content filtering proxy;decompression-free inspection;deep packet inspection;hypertext transfer protocol;inter-response redundancy;malicious software;network intrusion detection system;network intrusion prevention system;packet header;pattern matching algorithm;payload;regular expression matching;security tool;shared dictionary compression","","2","","25","","","25-30 March 2012","","IEEE","IEEE Conference Publications"
"Scalable multi-pipeline architecture for high performance multi-pattern string matching","W. Jiang; Y. H. E. Yang; V. K. Prasanna","Ming Hsieh Department of Electrical Engineering, University of Southern California, Los Angeles, CA 90089, USA","Parallel & Distributed Processing (IPDPS), 2010 IEEE International Symposium on","20100524","2010","","","1","12","Multi-pattern string matching remains a major performance bottleneck in network intrusion detection and anti-virus systems for high-speed deep packet inspection (DPI). Although Aho-Corasick deterministic finite automaton (AC-DFA) based solutions produce deterministic throughput and are widely used in today's DPI systems such as Snort [1] and ClamAV [2], the high memory requirement of AC-DFA (due to the large number of state transitions in AC-DFA) inhibits efficient hardware implementation to achieve high performance. Some recent work [3], [4] has shown that the AC-DFA can be reduced to a character trie that contains only the forward transitions by incorporating pipelined processing. But they have limitations in either handling long patterns or extensions to support multi-character input per clock cycle to achieve high throughput. This paper generalizes the problem and proves formally that a linear pipeline with H stages can remove all cross transitions to the top H levels of a AC-DFA. A novel and scalable pipeline architecture for memory-efficient multi-pattern string matching is then presented. The architecture can be easily extended to support multi-character input per clock cycle by mapping a compressed AC-DFA [5] onto multiple pipelines. Simulation using Snort and ClamAV pattern sets shows that a 8-stage pipeline can remove more than 99% of the transitions in the original AC-DFA. The implementation on a state-of-the-art field programmable gate array (FPGA) shows that our architecture can store on a single FPGA device the full set of string patterns from the latest Snort rule set. Our FPGA implementation sustains 10+ Gbps throughput, while consuming a small amount of on-chip logic resources. Also desirable scalability is achieved: the increase in resource requirement of our solution is sub-linear with the throughput improvement.","1530-2075;15302075","978-1-4244-6442-5;9781424464425","","10.1109/IPDPS.2010.5470374","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5470374","DFA;Deep packet inspection;FPGA;pipeline;string matching","Automata;Clocks;Field programmable gate arrays;Hardware;Inspection;Intrusion detection;Memory architecture;Pipelines;Programmable logic arrays;Throughput","field programmable gate arrays;finite automata;pipeline processing;security of data;string matching","Aho-Corasick deterministic finite automaton;ClamAV;Snort;anti-virus systems;field programmable gate array;high performance multipattern string matching;high-speed deep packet inspection;linear pipeline;memory-efficient multipattern string matching;multicharacter input;network intrusion detection;pipelined processing;scalable multipipeline architecture;scalable pipeline architecture","","2","","21","","","19-23 April 2010","","IEEE","IEEE Conference Publications"
"Memory-efficient pattern matching architectures using perfect hashing on graphic processing units","C. H. Lin; C. H. Liu; S. C. Chang; W. K. Hon","National Taiwan Normal University, Taipei, Taiwan","INFOCOM, 2012 Proceedings IEEE","20120510","2012","","","1978","1986","Memory architectures have been widely adopted in network intrusion detection system for inspecting malicious packets due to their flexibility and scalability. Memory architectures match input streams against thousands of attack patterns by traversing the corresponding state transition table stored in commodity memories. With the increasing number of attack patterns, reducing memory requirement has become critical for memory architectures. In this paper, we propose a novel memory architecture using perfect hashing to condense state transition tables without hash collisions. The proposed memory architecture achieves up to 99.5% improvement in memory reduction compared to the traditional two-dimensional memory architecture. We have implemented our memory architectures on graphic processing units and tested using attack patterns from Snort V2.8 and input packets form DEFCON. The experimental results show that the proposed memory architectures outperform state-of-the-art memory architectures both on performance and memory efficiency.","0743-166X;0743166X","978-1-4673-0773-4;9781467307734","","10.1109/INFCOM.2012.6195575","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6195575","deterministic finite automaton;pattern matching;perfect hashing","Automata;Educational institutions;Indexes;Memory management","computer network security;cryptography;graphics processing units;memory architecture","DEFCON;Snort V2.8;attack patterns;graphic processing units;input streams;malicious packet inspection;memory-efficient pattern matching architectures;network intrusion detection system;perfect hashing;state transition table;state transition tables","","2","","16","","","25-30 March 2012","","IEEE","IEEE Conference Publications"
"Scaling Regular Expression Matching Performance in Parallel Systems through Sampling Techniques","D. Ficara; G. Antichi; F. Vitucci; N. Bonelli; A. Di Pietro; S. Giordano; G. Procissi","Cisco Syst. Int. Sarl, Rolle, Switzerland","Global Telecommunications Conference (GLOBECOM 2011), 2011 IEEE","20120119","2011","","","1","5","Modern network devices need to perform deep packet inspection at high speed for security and application- specific services. For this purpose, regular expressions are used, due to their high expressive power, and Deterministic Finite Automata (DFAs) are adopted to match them. Many works have been proposed to improve DFAs, especially in terms of memory consumption and speed. Instead, we address another issue: the scalability of DFAs to parallel systems and their buffer requirements. To our knowledge, a single attempt to parallelize DFA walk on regular multicore systems (which ex- ploits speculation with limited efficiency) has been proposed in literature. We propose a solution in which a number of processing units are committed to walk in parallel a DFA for the same packet; at this aim, sampling techniques on both text and regular expressions are adopted. This scheme is the first in literature that proposes effective parallelization of DFA walk, hence allowing for packet processing time reduction and less memory for reordering buffers. The result is that speed scales as the number of processing units.","1930-529X;1930529X","978-1-4244-9266-4;9781424492664","978-1-4244-9267-1;9781424492671","10.1109/GLOCOM.2011.6134010","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6134010","","Automata;Doped fiber amplifiers;Instruction sets;Memory management;Multicore processing;Synchronization","buffer storage;deterministic automata;finite automata;inspection;multiprocessing systems;parallel processing;pattern matching;performance evaluation;sampling methods;security of data","DFA parallelization;buffer reordering;buffer requirements;deep packet inspection;deterministic finite automata;multicore systems;packet processing time reduction;parallel systems;regular expression matching performance;sampling technique;text expression","","0","","14","","","5-9 Dec. 2011","","IEEE","IEEE Conference Publications"
"A Memory-Efficient Parallel String Matching Architecture for High-Speed Intrusion Detection","H. Lu; K. Zheng; B. Liu; X. Zhang; Y. Liu","Dept. of Comput. Sci. & Technol., Tsinghua Univ., Beijing","IEEE Journal on Selected Areas in Communications","20061002","2006","24","10","1793","1804","The ability to inspect both packet headers and payloads to identify attack signatures makes network intrusion detection system (NIDS) a promising approach to protect Internet systems. Since most of the known attacks can be represented with strings or combinations of multiple substrings, string matching is a key component, as well as the bottleneck in NIDS to address the requirement of constantly increasing capacity. We propose a memory-efficient multiple-character-approaching architecture consisting of multiple parallel deterministic finite automata (DFAs), called TDP-DFA. By employing efficient representations for the transition rules in each DFA, TDP-DFA significantly reduces the complexity. We also present a novel scheme to share the storage of transition rules among multiple DFAs, substantially decreasing the total storage cost, and avoiding the cost increase being proportional to the number of DFAs. We evaluate this design through theoretical analysis and comprehensive experiments. Results show that TDP-DFA is able to meet the critical requirement of OC-768 wirespeed processing, as well as constituting a promising way for scaling up to cope with throughput over 100 Gb/s in the future","0733-8716;07338716","","","10.1109/JSAC.2006.877221","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1705612","Computer network security;finite automata;parallel processing;site security monitoring;string matching","Application specific integrated circuits;Automata;Costs;Frequency;IP networks;Intrusion detection;Memory architecture;Payloads;Protection;Throughput","Internet;deterministic automata;finite automata;packet switching;parallel architectures;security of data;string matching;telecommunication security","Internet system;NIDS;OC-768 wirespeed processing;TDP-DFA;deterministic finite automata;memory-efficient multiple-character-approach;network intrusion detection system;packet header;parallel architecture;string matching","","25","4","35","","","Oct. 2006","","IEEE","IEEE Journals & Magazines"
"A Parallel Aho-Corasick Algorithm with Non-deterministic Finite Automaton Based on OpenMP","J. Qu; G. Zhang; Z. Fang; J. Liu; X. Liu; F. Li","Harbin Eng. Univ. Harbin, Harbin, China","2015 Seventh International Conference on Advanced Communication and Networking (ACN)","20160307","2015","","","52","55","Existing typical algorithms of string matching are too difficult for taking advantage of multicore platforms. OpenMP (Open Multi-Processing) supports multiprocessing application programming interface with shared memory. We introduce a parallel Aho-Corasick algorithm based on OpenMP for shared memory, which exploits the non-deterministic finite automaton with space efficient for larger patterns. The experimental results show that the throughput can be achieved up to 7.5 Gbps on the average with 10000 patterns. The parallel algorithm would be successfully applied to data-intensive applications.","","978-1-4673-7954-0;9781467379540","","10.1109/ACN.2015.14","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7425545","Aho-Corasick algorithm;OpenMP;multicore;parallel computing","Algorithm design and analysis;Automata;Inspection;Instruction sets;Multicore processing;Parallel algorithms;Pattern matching","application program interfaces;finite automata;parallel algorithms;shared memory systems","OpenMP;multicore platforms;multiprocessing application programming interface;nondeterministic finite automaton;open multiprocessing system;parallel Aho-Corasick algorithm;shared memory system","","","","19","","","8-11 July 2015","","IEEE","IEEE Conference Publications"
"A practical network intrusion detection system for inline FPGAs on 10GbE network adapters","K. Jaic; M. C. Smith; N. Sarma","Holcombe Dept. of of Electr. & Comput. Eng., Clemson Univ., Clemson, SC, USA","2014 IEEE 25th International Conference on Application-Specific Systems, Architectures and Processors","20140731","2014","","","180","181","A network intrusion detection system (NIDS), such as SNORT, analyzes incoming packets to identify potential security threats. Pattern matching is arguably the most important and most computationally intensive component of a NIDS. Software-based NIDS implementations drop up to 90% of packets during increased network load even at lower network bandwidth. We propose an alternative hybrid-NIDS that couples an FPGA with a network adapter to provide hardware support for pattern matching and software support for post processing. The proposed system, SFAOENIDS, offers an extensible open-source NIDS for Solarflare AOE devices. The pattern matching engine-the primary component of the hardware architecture was designed based on the requirements of typical NIDS implementations. In testing on a real network environment, the SFAOENIDS hardware implementation, operating at 200 MHz, handles a 10Gbps data rate without dropping packets while simultaneously minimizing the server CPU load.","1063-6862;10636862","","","10.1109/ASAP.2014.6868655","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6868655","","Engines;Field programmable gate arrays;Hardware;Intrusion detection;Memory management;Pattern matching;Software","field programmable gate arrays;security of data","SFAOENIDS;SNORT;Solarflare AOE devices;inline FPGA;lower network bandwidth;network adapters;network load;open-source NIDS;pattern matching;pattern matching engine;practical network intrusion detection system;real network environment;security threats;software based NIDS implementations","","1","","8","","","18-20 June 2014","","IEEE","IEEE Conference Publications"
"NIDS based on payload word frequencies and anomaly of transitions","S. Mrdovic; B. Perunicic","University of Sarajevo, Faculty of Electrical Engineering, Bosnia and Herzegovina","Digital Information Management, 2008. ICDIM 2008. Third International Conference on","20090109","2008","","","334","339","This paper presents a novel payload analysis method. Consecutive bytes are separated by boundary symbols and defined as words. The frequencies of word appearance and word to word transitions are used to build a model of normal behavior. A simple anomaly score calculation is designed for fast attack detection. The method was tested using real traffic and recent attacks to demonstrate that it can be used in IDS. Tolerance to small number of attack in training data is shown.","","978-1-4244-2916-5;9781424429165","978-1-4244-2917-2;9781424429172","10.1109/ICDIM.2008.4746821","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4746821","","Frequency;Information systems;Intrusion detection;Payloads;Protection;Protocols;Telecommunication traffic;Testing;Traffic control;Training data","security of data;word processing","attack detection;boundary symbols;network intrusion detection system;payload word frequencies;word appearance;word to word transitions","","0","","39","","","13-16 Nov. 2008","","IEEE","IEEE Conference Publications"
"A workload for evaluating deep packet inspection architectures","M. Becchi; M. Franklin; P. Crowley","Computer Science and Engineering Department, Washington University in St. Louis, MO 63130 USA","Workload Characterization, 2008. IISWC 2008. IEEE International Symposium on","20080930","2008","","","79","89","High-speed content inspection of network traffic is an important new application area for programmable networking systems, and has recently led to several proposals for high-performance regular expression matching. At the same time, the number and complexity of the patterns present in well-known network intrusion detection systems has been rapidly increasing. This increase is important since both the practicality and the performance of specific pattern matching designs are strictly dependent upon characteristics of the underlying regular expression set. However, a commonly agreed upon workload for the evaluation of deep packet inspection architectures is still missing, leading to frequent unfair comparisons, and to designs lacking in generality or scalability. In this paper, we propose a workload for the evaluation of regular expression matching architectures. The workload includes a regular expression model and a traffic generator, with the former characterizing different levels of expressiveness within rule-sets and the latter characterizing varying degrees of malicious network activity. The proposed workload is used here to evaluate designs (e.g., different memory layouts and hardware organizations) where the matching algorithm is based on compressed deterministic and non deterministic finite automata (DFAs and NFAs).","","978-1-4244-2777-2;9781424427772","978-1-4244-2778-9;9781424427789","10.1109/IISWC.2008.4636093","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4636093","","Algorithm design and analysis;Character generation;Hardware;Inspection;Intrusion detection;Pattern matching;Proposals;Scalability;Telecommunication traffic;Traffic control","communication complexity;computer networks;data compression;deterministic automata;finite automata;formal languages;string matching;telecommunication security;telecommunication traffic","communication complexity;compressed deterministic finite automata;compressed nondeterministic finite automata;deep packet inspection architecture;high-performance regular expression pattern matching;high-speed content inspection;malicious network activity;network intrusion detection system;network traffic;programmable networking system","","23","3","28","","","14-16 Sept. 2008","","IEEE","IEEE Conference Publications"
"Realizing a Sub-Linear Time String-Matching Algorithm With a Hardware Accelerator Using Bloom Filters","P. C. Lin; Y. D. Lin; Y. C. Lai; Y. J. Zheng; T. H. Lee","Dept. of Comput. Sci., Nat. Chiao Tung Univ., Hsinchu, Taiwan","IEEE Transactions on Very Large Scale Integration (VLSI) Systems","20090721","2009","17","8","1008","1020","Many network security applications rely on string matching to detect intrusions, viruses, spam, and so on. Since software implementation may not keep pace with the high-speed demand, turning to hardware-based solutions becomes promising. This work presents an innovative architecture to realize string matching in sub-linear time based on algorithmic heuristics, which come from parallel queries to a set of space-efficient Bloom filters. The algorithm allows skipping characters not in a match in the text, and in turn simultaneously inspect multiple characters in effect. The techniques to reduce the impact of certain bad situations on performance are also proposed: the <i>bad-block</i> heuristic, a linear worst-case time method and a non-blocking interface to hand over the verification job to a verification module. This architecture is simulated with both behavior simulation in C and timing simulation in HDL for antivirus applications. The simulation shows that the throughput of scanning Windows executable files for more than 10000 virus signatures can achieve 5.64 Gb/s, while the worst-case performance is 1.2 Gb/s if the signatures are properly specified.","1063-8210;10638210","","","10.1109/TVLSI.2008.2012011","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4840440","Algorithms;field-programmable gate arrays (FPGAs);string matching","","C language;digital signatures;field programmable gate arrays;hardware description languages;integrated circuit design;logic design;program verification;string matching","Bloom filter;C language;HDL;algorithmic heuristics;antivirus application;bad-block heuristic;behavior simulation;field programmable gate array;hardware accelerator;linear worst-case time method;network security;nonblocking interface;parallel query;sublinear time string-matching algorithm;timing simulation;verification module;virus signature","","5","","39","","2009-04-24","Aug. 2009","","IEEE","IEEE Journals & Magazines"
"Benchmarking of compressed DFAs for traffic identification: Decoupling data structures from models","W. Melo; S. Fernandes; R. Antonello; D. Sadok; J. Kelner; G. Szab&#x00F3;","Federal University of Pernambuco (UFPE), Recife, Brazil","Global Communications Conference (GLOBECOM), 2012 IEEE","20130422","2012","","","1763","1769","Current network traffic analysis systems heavily rely on Deep Packet Inspection (DPI) techniques, such as Finite Automata (FA), to detect patterns carried by regular expression (regex). However, traditional Finite Automata cannot keep up with the ever-growing speed of the Internet links. Although there are a number of efficient FA compressing mechanisms for DPIs, there is no standardized or common way to evaluate and compare them. In this scenario, this paper proposes a methodology to evaluate and compare automaton models and the data-structures that materialize them. We also adapt state-of-the-art memory layouts to better fit in today's computer architectures. Finally, we apply our methodology to most important automaton models, memory layouts, and well-known signature sets. The results show us that some memory layouts are not efficient for regexes that represent small automata and other ones which fit only with uncompressed automata. Further, we also found out that theoretical studies about memory usage from memory encodings are not as accurate as they should be.","1930-529X;1930529X","978-1-4673-0920-2;9781467309202","978-1-4673-0919-6;9781467309196","10.1109/GLOCOM.2012.6503370","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6503370","DFA Models;Deep Packet Inspection;Performance Evaluation","","Internet;data compression;data structures;deterministic automata;finite automata;inspection;telecommunication traffic","DPI;FA compressing mechanisms;Internet links;automaton models;compressed DFA;computer architectures;data structure decoupling;deep packet inspection techniques;deterministic finite automata;memory encodings;memory layouts;network traffic analysis systems;regular expression;signature sets;traffic identification","","1","","20","","","3-7 Dec. 2012","","IEEE","IEEE Conference Publications"
"A Memory Efficient Multiple Pattern Matching Architecture for Network Security","T. Song; W. Zhang; D. Wang; Y. Xue","Tsinghua Univ., Beijing","INFOCOM 2008. The 27th Conference on Computer Communications. IEEE","20080502","2008","","","","","Pattern matching is one of the most important components for the content inspection based applications of network security, and it requires well designed algorithms and architectures to keep up with the increasing network speed. For most of the solutions, AC and its derivative algorithms are widely used. They are based on the DFA model but utilize large amount of memory because of so many transition rules. An algorithm, called ACC, is presented in this paper for multiple pattern matching. It uses a novel model, namely cached deterministic finite automate (CDFA). In ACC, by using CDFA, only 4.1% transition rules for ClamAV (20.8% for Snort) are needed to represent the same function using DFA built by AC. This paper also proposes a new scheme named next-state addressing (NSA) to store and access transition rules of DFA in memory. Using this method, transition rules can be efficiently stored and directly accessed. Finally the architecture for multiple pattern matching is optimized by several approaches. Experiments show our architecture can achieve matching speed faster than 10 Gbps with very efficient memory utilization, i.e., 81KB memory for 1.8 K Snort rules with total 29 K characters, and 9.5 MB memory for 50 K ClamAV rules with total 4.44 M characters. A single architecture is memory efficient for large pattern set, and it is possible to support more than 10 M patterns with at most half amount of the memory utilization compared to the state-of-the-art architectures.","0743-166X;0743166X","978-1-4244-2025-4;9781424420254","","10.1109/INFOCOM.2008.42","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4509637","","Algorithm design and analysis;Application software;Communications Society;Computer architecture;Computer science;Computer security;Doped fiber amplifiers;Inspection;Intrusion detection;Pattern matching","cache storage;computer networks;deterministic automata;finite automata;pattern matching;telecommunication security","ACC algorithm;cached deterministic finite automate;computer network security;content inspection based application;memory efficient multiple pattern matching architecture;next-state addressing scheme","","23","3","23","","","13-18 April 2008","","IEEE","IEEE Conference Publications"
"Hybrid Regular Expression Matching for Deep Packet Inspection on Multi-Core Architecture","Y. Sun; H. Liu; V. C. Valgenti; M. S. Kim","Sch. of Electr. & Comput. Eng., Washington State Univ., Pullman, WA, USA","Computer Communications and Networks (ICCCN), 2010 Proceedings of 19th International Conference on","20100902","2010","","","1","7","Many network security applications in today's networks are based on deep packet inspection, checking not only the header portion but also the payload portion of a packet. For example, traffic monitoring, layer-7 filtering, and network intrusion detection all require an accurate analysis of packet content in search for predefined patterns to identify specific classes of applications, viruses, attack signatures, etc. Regular expressions are often used to represent such patterns. They are implemented using finite automata, which take the payload of a packet as an input string. However, existing approaches, both non-deterministic finite automata (NFA) and deterministic finite automata (DFA), have limitations; NFAs have excessive time complexity while DFAs have excessive space complexity. In this paper, we propose an efficient algorithm for regular expression matching to implement deep packet inspection on multi-core architecture. A regular expression is split into NFA-friendly components and DFA-friendly components, which are then assigned to different cores. This hybrid method combines the merits of NFA and DFA implementations, and efficiently takes advantage of multi-core architecture. We evaluate our algorithm using rule sets provided by Snort, a popular open-source intrusion detection system. The simulation results show that our approach outperforms existing NFA/DFA and hybrid approaches. Furthermore, our algorithm performs well on the important issues on multi-core architecture design, such as load balancing, data locality and communication between cores.","1095-2055;10952055","978-1-4244-7114-0;9781424471140","","10.1109/ICCCN.2010.5560073","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5560073","","Automata;Bandwidth;Complexity theory;Doped fiber amplifiers;Memory management;Multicore processing;Program processors","computer viruses;finite automata;resource allocation;security of data;telecommunication networks;telecommunication security;telecommunication traffic","attack signatures;data locality;deep packet inspection;hybrid regular expression matching;layer-7 filtering;load balancing;multicore architecture;network intrusion detection;network security;nondeterministic finite automata;open-source intrusion detection;payload portion;space complexity;traffic monitoring;viruses","","3","1","27","","","2-5 Aug. 2010","","IEEE","IEEE Conference Publications"
"Proving correctness of regular expression accelerators","M. Purandare; K. Atasu; C. Hagleitner","IBM Research Zurich","Design Automation Conference (DAC), 2012 49th ACM/EDAC/IEEE","20120719","2012","","","350","355","A popular technique in regular expression matching accelerators is to decompose a regular expression and communicate through instructions executed by a post-processor. We present a complete verification method that leverages the success of sequential equivalence checking (SEC) to proving correctness of the technique. The original regular expression and the system of decomposed regular expressions are modeled as netlists and their equivalence is proved using SEC. SEC proves correct handling of 840 complex patterns from the Emerging Threats open rule set in 50 hours, eliminating altogether informal simulation and testing.","0738-100X;0738100X","978-1-4503-1199-1;9781450311991","","10.1145/2228360.2228424","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6241532","Formal Verification;Regular Expression Accelerators","Doped fiber amplifiers;Engines;Hardware;Impedance matching;Optimization;Registers;Testing","formal verification;theorem proving","Emerging Threats open rule set;SEC;correctness proving;formal verification method;net-lists;postprocessor;regular expression matching accelerators;sequential equivalence checking","","1","1","15","","","3-7 June 2012","","IEEE","IEEE Conference Publications"
"P3FSM: Portable Predictive Pattern Matching Finite State Machine","L. Vespa; M. Mathew; N. Weng","Dept. of Electr. & Comput. Eng., Southern Illinois Univ., Carbondale, IL, USA","2009 20th IEEE International Conference on Application-specific Systems, Architectures and Processors","20090811","2009","","","219","222","Signature-based network intrusion detection requires fast and reconfigurable pattern matching for deep packet inspection. In our previous work we address this problem with a hardware based pattern matching engine that utilizes a novel state encoding scheme to allow memory efficient use of Deterministic Finite Automata. In this work we expand on these concepts to create a completely software based system, P<sup>3</sup>FSM, which combines the properties of hardware based systems with the portability and programmability of software. Specifically we introduce two methods, character aware and SDFA, for encoding predictive state codes which can forecast the next states of our FSM. The result is software based pattern matching which is fast, reconfigurable, memory-efficient and portable.","1063-6862;10636862","978-0-7695-3732-0;9780769537320","978-0-7695-3732-0;9780769537320","10.1109/ASAP.2009.16","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5200035","","Automata;Doped fiber amplifiers;Encoding;Engines;Hardware;Inspection;Intrusion detection;Pattern matching;Samarium;Software systems","computer networks;deterministic automata;digital signatures;finite state machines;pattern matching;security of data;telecommunication security","deterministic finite automata;packet inspection;portable predictive pattern matching finite state machine;predictive state code encoding;reconfigurable pattern matching;signature-based network intrusion detection;software portability;software programmability;software-based system","","4","","8","","","7-9 July 2009","","IEEE","IEEE Conference Publications"
"A Scalable Architecture For High-Throughput Regular-Expression Pattern Matching","B. C. Brodie; D. E. Taylor; R. K. Cytron","Exegy, Inc.","33rd International Symposium on Computer Architecture (ISCA'06)","20060710","2006","","","191","202","We present and evaluate an architecture for high-throughput pattern matching of regular expressions. Our approach matches multiple patterns concurrently, responds rapidly to changes in the pattern set, and is well suited for synthesis in an ASIC or FPGA. Our approach is based on a new and easily pipelined state-machine representation that uses encoding and compression techniques to improve density. We have written a compiler that translates a set of regular expressions and optimizes their deployment in the structures used by our architecture. We analyze our approach in terms of its throughput, density, and efficiency. We present experimental results from an implementation in a commodity FPGA, showing better throughput and density than the best known approaches","1063-6897;10636897","0-7695-2608-X;076952608X","","10.1109/ISCA.2006.7","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1635952","","Application specific integrated circuits;Computer architecture;Computer networks;Encoding;Field programmable gate arrays;Filters;Optimizing compilers;Pattern matching;Postal services;Throughput","optimising compilers;parallel architectures;pattern matching;pattern recognition equipment;pipeline processing;program interpreters","ASIC;FPGA;compiler;compression techniques;encoding;high-throughput pattern matching;pipelined state-machine representation;scalable architecture","","51","11","19","","","0-0 0","","IEEE","IEEE Conference Publications"
"Multi pattern matching technique on fragmented and out-of-order packet streams for intrusion detection system","M. Kumar; M. Hanumanthappa","Dept. of Master of Comput. Applic., Bangalore Univ., Bangalore, India","Computing, Communications and Networking Technologies (ICCCNT),2013 Fourth International Conference on","20140130","2013","","","1","6","In this paper we are discussing about Intrusion Detection System based on Deterministic Finite-State Automata (DFA). The proposed system is designed to deal the fragmented and out-of-order packets. Fragmentation is the term given to the process of breaking down an IP datagram into smaller packets to be transmitted over different types of network media and then reassembling them at the other end. In most cases, depending upon the actual security device defending the network, there are typically multiple fragmentation techniques and packet size combinations capable of squeezing and exploiting protection device on a network. We present an efficient multi pattern algorithm for regular expression matching on streams with fragmented and out of order data, while maintaining a small state and without complete stream reconstruction. It improves the performance of Intrusion Detection System for detecting the fragmented and Out-of-Order packet attack. The proposed technique helps to achieve high throughput while limiting both memory-usage and memory-bandwidth on fragmented data packets intrusion.","","978-1-4799-3925-1;9781479939251","","10.1109/ICCCNT.2013.6726491","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6726491","Deterministic Finite Automata (DFA);Intrusion Detection System(IDS);Maximum Transmission Unit (MTU);Network Intrusion Detection Syterm(NIDS)","Automata;IP networks;Intrusion detection;Out of order;Pattern matching;Ports (Computers);Silicon","deterministic automata;finite state machines;pattern matching;security of data","DFA;IP datagram;deterministic finite-state automata;intrusion detection system;multipattern matching technique;multiple fragmentation techniques;out-of-order packet attack;out-of-order packet streams","","0","","14","","","4-6 July 2013","","IEEE","IEEE Conference Publications"
"Efficient mapping of nondeterministic automata to FPGA for fast regular expression matching","J. Ko&#191;enek; V. Ko&#353;a&#191;","Brno University of Technology Bozetechova 2, 612 66 Brno, Czech Republic","Design and Diagnostics of Electronic Circuits and Systems (DDECS), 2010 IEEE 13th International Symposium on","20100624","2010","","","54","59","With the growing number of viruses and network attacks, Intrusion Detection Systems have to match a large set of regular expressions at multi-gigabit speed to detect malicious activities on the network. Many algorithms and architectures have been designed to accelerate pattern matching, but most of them can be used only for strings or a small set of regular expressions. We propose new NFA-Split architecture, which reduces the amount of consumed FPGA resources in order to match larger set of regular expressions at multi-gigabit speed. The proposed reduction uses model of nondeterministic and deterministic automaton for effective mapping of regular expressions to FPGA. A new algorithm is designed to split the nondeterministic automaton transition table in order to map a part of the table into memory. The algorithm can place more than 49% of transition table to memory, which reduces the amount of look-up tables by more than 43% and flip-flops by more than 38% for all selected sets of regular expressions. Moreover, a sparse transition table is mapped to memory with overlapped rows, which enables to store the table in a highly compact form.","","978-1-4244-6612-2;9781424466122","","10.1109/DDECS.2010.5491816","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5491816","","Acceleration;Algorithm design and analysis;Automata;Field programmable gate arrays;Flip-flops;Hardware;Intrusion detection;Logic;Pattern matching;Viruses (medical)","computer network security;deterministic automata;field programmable gate arrays;pattern matching","FPGA;NFA-Split architecture;deterministic automaton;fast regular expression matching;flip flops;intrusion detection systems;look-up tables;malicious attacks;network attacks;nondeterministic automaton transition table;pattern matching;sparse transition table;viruses","","3","","21","","","14-16 April 2010","","IEEE","IEEE Conference Publications"
"High Speed Pattern Matching for Network IDS/IPS","M. Alicherry; M. Muthuprasanna; V. Kumar","Lucent Bell Laboratories, Murray Hill, NJ, USA - 07974. Email: mansoor@bell-labs.com","Proceedings of the 2006 IEEE International Conference on Network Protocols","20070226","2006","","","187","196","The phenomenal growth of the Internet in the last decade and society's increasing dependence on it has brought along, a flood of security attacks on the networking and computing infrastructure. Intrusion detection/prevention systems provide defenses against these attacks by monitoring headers and payload of packets flowing through the network. Multiple string matching that can compare hundreds of string patterns simultaneously is a critical component of these systems, and is a well-studied problem. Most of the string matching solutions today are based on the classic Aho-Corasick algorithm, which has an inherent limitation; they can process only one input character in one cycle. As memory speed is not growing at the same pace as network speed, this limitation has become a bottleneck in the current network, having speeds of tens of gigabits per second. In this paper, we propose a novel multiple string matching algorithm that can process multiple characters at a time thus achieving multi-gigabit rate search speeds. We also propose an architecture for an efficient implementation on TCAM-based hardware. We additionally propose novel optimizations by making use of the properties of TCAMs to significantly reduce the memory requirements of the proposed algorithm. We finally present extensive simulation results of network-based virus/worm detection using real signature databases to illustrate the effectiveness of the proposed scheme.","1092-1648;10921648","1-4244-0593-9;1424405939","1-4244-0594-7;1424405947","10.1109/ICNP.2006.320212","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4110291","","Computer networks;Data security;Filtering;IP networks;Internet;Intrusion detection;Matched filters;Monitoring;Pattern matching;Payloads","Internet;computer viruses;database management systems;digital signatures;optimisation;string matching","Aho-Corasick algorithm;Internet;TCAM-based hardware;multi-gigabit rate search speed;multiple string matching algorithm;network intrusion detection system;network intrusion prevention system;network-based virus/worm detection;optimization;pattern matching;security attack;signature database;string matching","","36","46","35","","","12-15 Nov. 2006","","IEEE","IEEE Conference Publications"
"Ultra-high throughput string matching for Deep Packet Inspection","A. Kennedy; X. Wang; Z. Liu; B. Liu","School of Electronic Engineering, Dublin City University, Dublin 9, Ireland","2010 Design, Automation & Test in Europe Conference & Exhibition (DATE 2010)","20100429","2010","","","399","404","Deep Packet Inspection (DPI) involves searching a packet's header and payload against thousands of rules to detect possible attacks. The increase in Internet usage and growing number of attacks which must be searched for has meant hardware acceleration has become essential in the prevention of DPI becoming a bottleneck to a network if used on an edge or core router. In this paper we present a new multi-pattern matching algorithm which can search for the fixed strings contained within these rules at a guaranteed rate of one character per cycle independent of the number of strings or their length. Our algorithm is based on the Aho-Corasick string matching algorithm with our modifications resulting in a memory reduction of over 98% on the strings tested from the Snort ruleset. This allows the search structures needed for matching thousands of strings to be small enough to fit in the on-chip memory of an FPGA. Combined with a simple architecture for hardware, this leads to high throughput and low power consumption. Our hardware implementation uses multiple string matching engines working in parallel to search through packets. It can achieve a throughput of over 40 Gbps (OC-768) when implemented on a Stratix 3 FPGA and over 10 Gbps (OC-192) when implemented on the lower power Cyclone 3 FPGA.","1530-1591;15301591","978-1-4244-7054-9;9781424470549","","10.1109/DATE.2010.5457172","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5457172","","Acceleration;Energy consumption;Field programmable gate arrays;Hardware;IP networks;Inspection;Payloads;Search engines;Testing;Throughput","field programmable gate arrays;string matching","Aho-Corasick string matching algorithm;Cyclone 3 FPGA;Internet usage;Snort ruleset;Stratix 3 FPGA;deep packet inspection;field programmable gate arrays;fixed strings;memory reduction;multipattern matching algorithm;multiple string matching engines;on-chip memory;power consumption;ultra-high throughput string matching","","0","","18","","","8-12 March 2010","","IEEE","IEEE Conference Publications"
"CompactDFA: Scalable Pattern Matching Using Longest Prefix Match Solutions","A. Bremler-Barr; D. Hay; Y. Koral","Dept. of Comput. Sci., Interdiscipl. Center, Herzliya, Israel","IEEE/ACM Transactions on Networking","20140417","2014","22","2","415","428","A central component in all contemporary intrusion detection systems (IDSs) is their pattern matching algorithms, which are often based on constructing and traversing a deterministic finite automaton (DFA) that represents the patterns. While this approach ensures deterministic time guarantees, modern IDSs need to deal with hundreds of patterns, thus requiring to store very large DFAs, which usually do not fit in fast memory. This results in a major bottleneck on the throughput of the IDS, as well as its power consumption and cost. We propose a novel method to compress DFAs by observing that the name used by common DFA encoding is meaningless. While regular DFAs store separately each transition between two states, we use this degree of freedom and encode states in such a way that all transitions to a specific state are represented by a single prefix that defines a set of current states. Our technique applies to a large class of automata, which can be categorized by simple properties. Then, the problem of pattern matching is reduced to the well-studied problem of Longest Prefix Match (LPM), which can be solved either in ternary content-addressable memory (TCAM), in commercially available IP-lookup chips, or in software. Specifically, we show that with a TCAM our scheme can reach a throughput of 10 Gb/s with low power consumption.","1063-6692;10636692","","","10.1109/TNET.2013.2253119","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6494357","Aho–Corasick (AC);IP lookup;deep packet inspection;network intrusion detection system (NIDS);pattern matching;ternary content-addressable memory (TCAM)","","IP networks;encoding;energy consumption;pattern matching;security of data","DFA encoding;IDS;IP-lookup chips;LPM;TCAM;contemporary intrusion detection systems;degree of freedom;deterministic finite automaton;longest prefix match solutions;power consumption;scalable pattern matching algorithms;ternary content-addressable memory","","1","","34","","2013-04-04","April 2014","","IEEE","IEEE Journals & Magazines"
"High-Speed Memory-Efficient Network Intrusion Detection System","W. Lin; X. Wang; Y. Qi; D. Pao; B. Liu","Dept. of Comput. Sci. & Technol., Tsinghua Univ., Beijing","INFOCOM Workshops 2009, IEEE","20090612","2009","","","1","2","In this paper, two-stage NIDS architecture is proposed, which aims to both increase the throughput and reduce memory cost. The contributions of this work are listed below.","","978-1-4244-3968-3;9781424439683","","10.1109/INFCOMW.2009.5072152","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5072152","","Computer science;Computer security;Doped fiber amplifiers;Impedance matching;Information technology;Inspection;Intrusion detection;Pattern matching;Throughput;White spaces","computer networks;security of data","NIDS architecture;high-speed memory-efficient network intrusion detection system;memory cost reduction","","0","","2","","","19-25 April 2009","","IEEE","IEEE Conference Publications"
"A Comparative Study on DFA-Based Pattern Matching for Deep Packet Inspection","R. K. Lenka; P. Ranjan","Comput. Sci. &amp; Eng. Dept., Motilal Nehru Nat. Inst. of Technol., Allahabad, India","Computer and Communication Technology (ICCCT), 2012 Third International Conference on","20130110","2012","","","255","260","Most of the network security applications in today's networks are based on Deep Packet Inspection (DPI). It is a form of computer network packet filtering that examines not only the header portion but also the payload part of a packet as it passes through an inspection point, searching for protocol noncompliance, viruses, Spam, intrusions or some predefined criteria to decide if the packet can pass it or it needs to be routed to a different destination. Most of the systems that perform deep packet inspection implement basic string matching algorithms to match packets against large but finite strings. However, there is growing interest in the use of regular expression-based pattern matching, since regular expressions offer superior expressive power. DFA is employed to implement regular expression matching. DFA representations of a regular expression sets in network applications require large amounts of memory, limiting their practical application. This paper presents an analysis of different compact representation of DFA such as D<sup>2</sup>FA, δFA, δ<sup>2</sup>FA.","","978-1-4673-3149-4;9781467331494","","10.1109/ICCCT.2012.59","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6394708","DFA;deep packet inspection;regular expressions","Automata;Computer science;Doped fiber amplifiers;Inspection;Intrusion detection;Memory management;Pattern matching","computer network security;computer viruses;finite automata;protocols;string matching;unsolicited e-mail","δ<sup>2</sup>FA;D<sup>2</sup>FA;DFA-based pattern matching;DPI;computer network packet filtering;deep packet inspection;delta finite automata;inspection point;intrusions;network security applications;protocol noncompliance searching;regular expression-based pattern matching;spam;string matching algorithms;virus","","1","","17","","","23-25 Nov. 2012","","IEEE","IEEE Conference Publications"
"Skip Finite Automaton: A Content Scanning Engine to Secure Enterprise Networks","J. Jiang; Y. Tang; B. Liu; Y. Xu; X. Wang","Inst. for Theor. Comput. Sci., Tsinghua Univ., Beijing, China","Global Telecommunications Conference (GLOBECOM 2010), 2010 IEEE","20110110","2010","","","1","5","Today's file sharing networks are creating potential security problems to enterprise networks, i.e., the leakage of confidential documents. In order to prevent such leakage, we propose the Data Leakage Prevention System (DLPS) which is applied at the entrance of the enterprise network to filter out the outgoing sensitive information. The DLPS is based on a content scanning engine which defines a new type of matching problem, called longest overlap matching which also exits in many other applications as a basic problem where contents are delivered by small blocks. We study the problem by comparing it with the traditional pattern matching problem in Deep Packet Inspection (DPI) of Network Intrusion Detection Systems (NIDS) whose solutions are based on finite automata. We develop a new finite automata representation called Skip-Finite Automata (Skip-FA) which detects the packets carrying sensitive information by using default transitions to implicitly track the overlapping parts between packets' payloads and sensitive files. The simulation results shows that our system achieves a matching speed of about 10B+ per memory access for small file set (>;20KB) and 100B+ per memory access for large file set (>;2500KB). We also find that the memory consumption of Skip-FA is almost the same to that of the original files.","1930-529X;1930529X","978-1-4244-5636-9;9781424456369","978-1-4244-5637-6;9781424456376","10.1109/GLOCOM.2010.5683165","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5683165","","Automata;Delay;Engines;IEEE Communications Society;Logic gates;Payloads;Radiation detectors","finite automata;peer-to-peer computing;security of data;telecommunication security","content scanning engine;data leakage prevention system;deep packet inspection;file sharing network;finite automata representation;network intrusion detection system;pattern matching problem;secure enterprise network;skip finite automata;skip finite automaton","","1","1","18","","","6-10 Dec. 2010","","IEEE","IEEE Conference Publications"
"Condition Factorization: A Technique for Building Fast and Compact Packet Matching Automata","A. Tongaonkar; R. Sekar","Symantec, San Francisco, CA, USA","IEEE Transactions on Information Forensics and Security","20151224","2016","11","3","468","483","Rule-based matching on network packet headers is a central problem in firewalls, and network intrusion, monitoring, and access-control systems. To enhance performance, rules are typically compiled into a matching automaton that can quickly identify the subset of rules that are applicable to a given network packet. While deterministic automata provide the best performance, previous research has shown that such automata can be exponential in the size and/or number of rules. Nondeterministic automata can avoid size explosion, but their matching time can increase quickly with the number of rules. In contrast, we present a new technique that constructs polynomial size automata. Moreover, we show that the matching time of our automata is insensitive to the number of rules. The key idea in our approach is that of decomposing and reordering the tests on packet header fields so that the result of performing a test can be utilized on behalf of many rules. Our experiments demonstrate major reductions in space requirements over previous techniques, as well as significant improvements in matching speed. Our technique can uniformly handle prioritized and unprioritized rules, and support applications that require single-match as well as multi-match.","1556-6013;15566013","","","10.1109/TIFS.2015.2489182","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7295611","Firewalls;Intrusion Detection Systems;Network Monitoring;Packet Classification;Packet classification;firewalls;intrusion detection systems;network monitoring","Automata;Firewalls (computing);Intrusion detection;Monitoring;Payloads;Polynomials;Runtime","authorisation;deterministic automata;firewalls","access-control system;compact packet matching automata;condition factorization;deterministic automata;intrusion detection;nondeterministic automata;rule-based matching","","","","45","","2015-10-09","March 2016","","IEEE","IEEE Journals & Magazines"
"Hardware implementation for scalable lookahead Regular Expression detection","M. Bando; N. S. Artan; N. Mehta; Yi Guan; H. J. Chao","Department of Electrical and Computer Engineering, Polytechnic Institute of NYU, Brooklyn, NY, USA","Parallel & Distributed Processing, Workshops and Phd Forum (IPDPSW), 2010 IEEE International Symposium on","20100524","2010","","","1","8","Regular Expressions (RegExes) are widely used in various applications to identify strings of text. Their flexibility, however, increases the complexity of the detection system and often limits the detection speed as well as the total number of RegExes that can be detected using limited resources. The two classical detection methods, Deterministic Finite Automaton (DFA) and Non-Deterministic Finite Automaton (NFA), have the potential problems of prohibitively large memory requirements and a large number of concurrent operations, respectively. Although recent schemes addressing these problems to improve DFA and NFA are promising, they are inherently limited by their scalability, since they follow the state transition model in DFA and NFA, where the state transitions occur per each character of the input. We recently proposed a scalable RegEx detection system called Lookahead Finite Automata (LaFA) to solve these problems with three novel ideas: 1. Provide specialized and optimized detection modules to increase resource utilizations. 2. Systematically reordering the RegEx detection sequence to reduce number of concurrent operations. 3. Sharing states among automata for different RegExes to reduce resource requirements. In this paper, we propose an efficient hardware architecture and prototype design implementation based on LaFA. Our proof-of-concept prototype design is built on a fraction of a single commodity Field Programmable Gate Array (FPGA) chip and can accommodate up to twenty-five thousand (25k) RegExes. Using only 7% of the logic area and 25% of the memory on a Xilinx Virtex-4 FX100, the prototype design can achieve 2-Gbps (gigabits-per-second) detection throughput with only one detection engine. We estimate that 34-Gbps detection throughput can be achieved if the entire resources of a state-of-the-art FPGA chip are used to implement multiple detection engines.","","978-1-4244-6533-0;9781424465330","","10.1109/IPDPSW.2010.5470750","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5470750","","Automata;Doped fiber amplifiers;Engines;Field programmable gate arrays;Hardware;Programmable logic arrays;Prototypes;Resource management;Scalability;Throughput","field programmable gate arrays;finite automata;optimisation;security of data","DFA;FPGA;NFA;RegExes;detection system complexity;deterministic finite automaton;field programmable gate array;hardware implementation;nondeterministic finite automaton;prototype design implementation;scalable lookahead regular expression detection","","2","","28","","","19-23 April 2010","","IEEE","IEEE Conference Publications"
"Accelerating regular expression matching over compressed HTTP","M. Becchi; A. Bremler-Barr; D. Hay; O. Kochba; Y. Koral","Univ. of Missouri, Columbia, MO, USA","2015 IEEE Conference on Computer Communications (INFOCOM)","20150824","2015","","","540","548","This paper focuses on regular expression matching over compressed traffic. The need for such matching arises from two independent trends. First, the volume and share of compressed HTTP traffic is constantly increasing. Second, due to their superior expressibility, current Deep Packet Inspection engines use regular expressions more and more frequently. We present an algorithmic framework to accelerate such matching, taking advantage of information gathered when the traffic was initially compressed. HTTP compression is typically performed through the GZIP protocol, which uses back-references to repeated strings. Our algorithm is based on calculating (for every byte) the minimum number of (previous) bytes that can be part of a future regular expression matching. When inspecting a back-reference, only these bytes should be taken into account, thus enabling one to skip repeated strings almost entirely without missing a match. We show that our generic framework works with either NFA-based or DFA-based implementations and gains performance boosts of more than 70%. Moreover, it can be readily adapted to most existing regular expression matching algorithms, which usually are based either on NFA, DFA or combinations of the two. Finally, we discuss other applications in which calculating the number of relevant bytes becomes handy, even when the traffic is not compressed.","0743-166X;0743166X","","","10.1109/INFOCOM.2015.7218421","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7218421","","Acceleration;Automata;Computers;Conferences;Estimation;Inspection;Pattern matching","data compression;deterministic automata;finite automata;hypermedia;pattern matching;transport protocols","DFA-based implementation;GZIP protocol;NFA-based implementation;compressed HTTP traffic;deterministic finite automata;hypertext transfer protocol;nondeterministic finite automata;regular expression matching","","0","","33","","","April 26 2015-May 1 2015","","IEEE","IEEE Conference Publications"
"Another CDFA Based Multi-Pattern Matching Algorithm and Architecture for Packet Inspection","T. Song; D. Wang","Sch. of Comput. Sci., Beijing Inst. of Technol., Beijing, China","Computer Communications and Networks (ICCCN), 2011 Proceedings of 20th International Conference on","20110829","2011","","","1","8","Multi-pattern matching algorithm and architecture is critical for packet inspection based network security applications, especially for high speed network or large pattern sets. This paper presents a method to optimize the potential memory usage of DFA based algorithms for multi-pattern expression matching by the combining DFA's paths, named isomorphic path combination (IMPC). To achieve IMPC, a novel multi-pattern matching algorithm, called ACS, is proposed, which is based on CDFA. Compared to the algorithms on DFA, our method can reduce 78.6% states for Snort pattern set, which results in one of the most memory efficient methods. The most important is that our method is a kind of optimization and can be embedded to other algorithms as the second step for better results. Finally the architecture based on ACS is proposed and the experimental results show that 47.6% to 84.0% memory space can be saved for different size of pattern sets as compared to the best known architectures. The method is another one based on CDFA. It means that CDFA may be a more proper model for multi-pattern matching than other FAs.","1095-2055;10952055","978-1-4577-0637-0;9781457706370","","10.1109/ICCCN.2011.6005927","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6005927","","Algorithm design and analysis;Color;Computer architecture;Doped fiber amplifiers;Inspection;Pattern matching;Registers","optimisation;pattern matching;telecommunication security","CDFA;DFA based algorithms;Snort pattern set;high speed network;isomorphic path combination;memory usage;multipattern expression matching;network security;optimization;packet inspection;pattern sets","","0","","21","","","July 31 2011-Aug. 4 2011","","IEEE","IEEE Conference Publications"
"NFA-Based Pattern Matching for Deep Packet Inspection","Y. Sun; V. C. Valgenti; M. S. Kim","Sch. of Electr. & Comput. Eng., Washington State Univ., Pullman, WA, USA","Computer Communications and Networks (ICCCN), 2011 Proceedings of 20th International Conference on","20110829","2011","","","1","6","Many network security applications in today's networks are based on deep packet inspection, checking not only the header portion but also the payload portion of a packet. For example, traffic monitoring, layer-7 filtering, and network intrusion detection all require an accurate analysis of packet content in search for predefined patterns to identify specific classes of applications, viruses, attack signatures, etc. Pattern matching is a major task in deep packet inspection. The two most common implementations of Pattern matching are based on Non-deterministic Finite Automata (NFAs) and Deterministic Finite Automata (DFAs), which take the payload of a packet as an input string. In this paper, we propose an efficient NFA-based pattern matching in Binary Content Addressable Memory(BCAM), which uses data search words consisting of 1s and 0s. Our approach can process multiple characters at a time using limited BCAM entries, which makes our approach scalable well. We evaluate our algorithm using patterns provided by Snort, a popular open-source intrusion detection system. The simulation results show that our approach outperforms existing CAM-based and software-based approaches.","1095-2055;10952055","978-1-4577-0637-0;9781457706370","","10.1109/ICCCN.2011.6006095","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6006095","","Automata;Clocks;Computer aided manufacturing;Computer architecture;Doped fiber amplifiers;Microprocessors;Pattern matching","computer network security;content-addressable storage;deterministic automata;finite automata;pattern matching","BCAM;NFA-based pattern matching;Snort;binary content addressable memory;data search word;deep packet inspection;network security;nondeterministic finite automata;open-source intrusion detection system","","2","1","28","","","July 31 2011-Aug. 4 2011","","IEEE","IEEE Conference Publications"
"Multi-byte Pattern Matching Using Stride-K DFA for High Speed Deep Packet Inspection","M. Najam; U. Younis; R. U. Rasool","Sch. of Electr. Eng. & Comput. Sci. (SEECS), Nat. Univ. of Sci. & Technol. (NUST), Islamabad, Pakistan","Computational Science and Engineering (CSE), 2014 IEEE 17th International Conference on","20150129","2014","","","547","553","Deep packet inspection (DPI) is one of the crucial tasks in modern intrusion detection and intrusion prevention systems. It allows the inspection of packet payload using patterns. Modern DPI based systems use regular expressions to define these patterns. Deterministic finite automata (DFA) is considered to be an ideal choice for performing regular expression matching due to its O(1) processing complexity. However, DFAs consume large memory to store its state transition table, but this problem gets worsened when stride level of the DFA is increased. Though, increasing stride level brings significant increase in the overall speedup of the matching engine but as a trade off it consumes large memory. In this paper, we present stride-k speculative parallel pattern matching (SPPM), a technique in which a packet is first split up into two chunks and then multiple bytes per chunk are inspected at a time using stride-k DFA. Furthermore, we present a stride-k DFA compression technique using alphabet compression table (ACT) to reduce the memory requirements of stride-k DFA. We have implemented the single threaded algorithm for stride-2 SPPM. Results show that the use of stride-2 SPPM can overall increase the pattern matching speed by up to 30% as compared to traditional DFA matching, and a significant reduction of over 70% in the number iterations required for packet processing. Secondly, over 65% reduction in the number of transitions has been achieved using ACT for stride-2 DFA implementation.","","978-1-4799-7980-6;9781479979806","","10.1109/CSE.2014.125","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7023635","DFA;alphabet compression;deep packet inspection;multi-byte matching;regular expressions","Automata;Educational institutions;Indexes;Inspection;Memory management;Parallel processing;Pattern matching","computational complexity;deterministic automata;finite automata;pattern matching;security of data","ACT;alphabet compression table;deterministic finite automata;high speed deep packet inspection;intrusion detection system;intrusion prevention system;multibyte pattern matching;processing complexity;regular expression matching;stride-2 SPPM;stride-k DFA compression technique;stride-k speculative parallel pattern matching","","0","","24","","","19-21 Dec. 2014","","IEEE","IEEE Conference Publications"
"Distributed Intrusion Detection with Intelligent Network Interfaces for Future Networks","Y. Luo; K. Xiang; J. Fan; C. Zhang","Dept. of Electr. & Comput. Eng., Univ. of Massachusetts, Lowell, MA, USA","2009 IEEE International Conference on Communications","20090811","2009","","","1","5","Intrusion detection remains an important and challenging task in current and next generation networks (NGN). Emerging technologies such as multi-core processors and virtualization have changed the architecture of the building elements of NGN significantly, thus call for rethinking of how network processing is done. In this paper, we propose distributed intrusion detection using intelligent network interfaces where additional processing capabilities are available. We design and implement a prototype to perform pattern matching using network processors since pattern matching is one of the important workloads in intrusion detection. Through the experimental results, we show the feasibility and performance of distributed intrusion detection in next generation networks.","1550-3607;15503607","978-1-4244-3435-0;9781424434350","978-1-4244-3435-0;9781424434350","10.1109/ICC.2009.5198928","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5198928","","Computer architecture;IP networks;Intelligent networks;Intrusion detection;Multicore processing;Network interfaces;Network servers;Next generation networking;Pattern matching;Prototypes","network interfaces;pattern matching;security of data","distributed intrusion detection;intelligent network interfaces;multicore processors;network processing;network processors;next generation networks;pattern matching;virtualization","","0","","15","","","14-18 June 2009","","IEEE","IEEE Conference Publications"
"Kangaroo: Accelerating String Matching by Running Multiple Collaborative Finite State Machines","X. Wang; B. Liu; J. Jiang; Y. Xu; Y. Wang; X. Wang","Tsinghua Univ., Beijing, China","IEEE Journal on Selected Areas in Communications","20141127","2014","32","10","1784","1796","String matching is a key technique for network security applications such as network intrusion detection systems and antivirus scanners, where the payload of every packet is inspected against thousands of patterns in real time. As the transmission rate of Internet links is getting higher and higher, the speed of matching engines is required to be faster and faster. Existing deterministic finite automaton (DFA)-based approaches achieve high throughput at the expense of extremely expensive memory cost; therefore, they are not suitable for the scenarios where only limited on-chip memory resources are available. To achieve fast matching speed while controlling memory expense, in this paper, we propose Kangaroo, a compact string matching scheme that scans multiple characters each time by running multiple small-sized finite state machines in parallel. Specifically, Kangaroo processes k consecutive characters mostly in one cycle by accessing k different memories in parallel, where k is a predefined factor that can be tuned based on the requirement of applications. Kangaroo is memory efficient. Experimental evaluations on Snort and ClamAV rule sets show that a tenfold increase in speed can be practically achieved by a single Kangaroo matching engine with a reduced memory cost comparing with the state-of-the-art DFA-based approaches.","0733-8716;07338716","","","10.1109/JSAC.2014.2358841","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6905731","Deep packet inspection;deterministic finite automaton;finite state machine","Automata;Buildings;Collaboration;Educational institutions;Engines;Silicon;Throughput","deterministic automata;finite state machines;string matching","ClamAV;DFA;Internet links;Kangaroo scheme;Snort;antivirus scanners;collaborative finite state machines;deterministic finite automaton;network intrusion detection system;on-chip memory resources;string matching","","1","","30","","2014-09-19","Oct. 2014","","IEEE","IEEE Journals & Magazines"
"High-speed string searching against large dictionaries on the Cell/B.E. Processor","D. P. Scarpazza; O. Villa; F. Petrini","IBM TJ Watson Research Center, Cell Solution Department, Yorktown Heights, NY 10598 USA","Parallel and Distributed Processing, 2008. IPDPS 2008. IEEE International Symposium on","20080603","2008","","","1","12","Our digital universe is growing, creating exploding amounts of data which need to be searched, filtered and protected. String searching is at the core of the tools we use to curb this explosion, such as search engines, network intrusion detection systems, spam filters, and anti-virus programs. But as communication speed grows, our capability to perform string searching in real-time seems to fall behind. Multi-core architectures promise enough computational power to cope with the incoming challenge, but it is still unclear which algorithms and programming models to use to unleash this power. We have parallelized a popular string searching algorithm, Aho-Corasick, on the IBM Cell/B.E. processor, with the goal of performing exact string matching against large dictionaries. In this article we propose a novel approach to fully exploit the DMA-based communication mechanisms of the Cell/B.E. to provide an unprecedented level of aggregate performance with irregular access patterns. We have discovered that memory congestion plays a crucial role in determining the performance of this algorithm. We discuss three aspects of congestion: memory pressure, layout issues and hot spots, and we present a collection of algorithmic solutions to alleviate these problems and achieve quasi-optimal performance. The implementation of our algorithm provides a worst- case throughput of 2.5 Gbps, and a typical throughput between 3.3 and 4.4 Gbps, measured on realistic scenarios with a two-processor Cell/B.E. system.","1530-2075;15302075","978-1-4244-1693-6;9781424416936","978-1-4244-1694-3;9781424416943","10.1109/IPDPS.2008.4536300","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4536300","","Aggregates;Computer architecture;Dictionaries;Digital filters;Explosions;Intrusion detection;Power system modeling;Protection;Search engines;Throughput","multiprocessing systems;string matching;text analysis","Aho-Corasick;Cell/B.E. processor;exact string matching;high-speed string searching;hot spots;irregular access patterns;large dictionaries;layout issues;memory congestion;memory pressure;multicore architecture","","8","1","19","","","14-18 April 2008","","IEEE","IEEE Conference Publications"
"Characterization and Solution to a Stateful IDS Evasion","I. Aib; T. Tran; R. Boutaba","Univ. of Waterloo, Waterloo, ON, Canada","Distributed Computing Systems, 2009. ICDCS '09. 29th IEEE International Conference on","20090707","2009","","","597","604","We identify a new type of stateful IDS evasion, named signature evasion. We formalize the signature evasion on those Stateful IDSs whose state can be modeled using Deterministic Finite State Automata (DFAs). We develop an efficient algorithm which operates on rule set DFAs and derives a minimal rectification of evasive paths. Finally, we evaluate our solution on Snort signatures, identify and rectify existing vulnerable flowbit rule sets.","1063-6927;10636927","978-0-7695-3659-0;9780769536590","978-0-7695-3659-0;9780769536590","10.1109/ICDCS.2009.65","http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5158473","IDS evasion;Intrusion Detection;Regular automata;Signature matching","Automata;Distributed computing;Doped fiber amplifiers;File servers;Intrusion detection;Lead;Protection;Protocols;Reverse engineering;Signal processing","deterministic automata;digital signatures;finite state machines;set theory","deterministic finite state automata;intrusion detection system;rule set;signature evasion;stateful IDS evasion","","0","","20","","","22-26 June 2009","","IEEE","IEEE Conference Publications"
